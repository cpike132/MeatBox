#include <iostream>

#include "raylib.h"

#include <math.h>


//----------------------------------------------------------------------------------
// Some Defines
//----------------------------------------------------------------------------------
const float PLAYER_BASE_SIZE = 20.0f;
const float PLAYER_SPEED = 6.0f;
const int PLAYER_MAX_SHOOTS = 10;

const int METEORS_SPEED = 4;
const int MAX_MEDIUM_METEORS = 2;
const int MAX_SMALL_METEORS = 15;

//----------------------------------------------------------------------------------
// Types and Structures Definition
//----------------------------------------------------------------------------------
typedef struct Player {

	Vector2 position;
	Vector2 speed;
	float acceleration;
	float rotation;
	Vector3 collider;
	Color color;
} Player;

typedef struct Meteor {
	Vector2 position;
	Vector2 speed;
	float radius;
	bool active;
	Color color;
} Meteor;

//------------------------------------------------------------------------------------
// Global Variables Declaration
//------------------------------------------------------------------------------------
static const int screenWidth = 1280;
static const int screenHeight = 720;

static int framesCounter = 0;
static bool gameOver = false;
static bool pause = false;

// NOTE: Defined triangle is isosceles with common angles of 70 degrees.
static float shipHeight = 0.0f;

static Player player = { 0 };
static Meteor mediumMeteor[MAX_MEDIUM_METEORS] = { 0 };
static Meteor smallMeteor[MAX_SMALL_METEORS] = { 0 };

//------------------------------------------------------------------------------------
// Module Functions Declaration (local)
//------------------------------------------------------------------------------------
static void InitGame();
void InitMedium();
void InitSmall();
static void UpdateGame();
static void DrawGame();
static void UnloadGame();
static void UpdateDrawFrame();

bool wave_1 = true;
bool wave_2 = false;
bool wave_3 = false;

//------------------------------------------------------------------------------------
// Program main entry point
//------------------------------------------------------------------------------------
int main(void)
{
	// Initialization (Note windowTitle is unused on Android)
	//---------------------------------------------------------
	InitWindow(screenWidth, screenHeight, "SpaceBox");

	InitGame();

#if defined(PLATFORM_WEB)
	emscripten_set_main_loop(UpdateDrawFrame, 60, 1);
#else
	SetTargetFPS(60);

	while (!WindowShouldClose())
	{

		UpdateDrawFrame();

	}
#endif

	UnloadGame();

	CloseWindow();

	return 0;
}

void InitGame(void)
{
	wave_1 = true;
	wave_2 = false;
	wave_3 = false;

	pause = false;

	framesCounter = 0;

	shipHeight = (PLAYER_BASE_SIZE / 2) / tanf(20 * DEG2RAD);

	// Initialization player
	player.position = Vector2{ (float)screenWidth / 2, (float)screenHeight / 2 - shipHeight / 2 };
	player.speed = Vector2{ (float)0, 0 };
	player.acceleration = 0;
	player.rotation = 0;
	player.collider = Vector3{ (float)player.position.x + sin(player.rotation * DEG2RAD) * (shipHeight / 2.5f), player.position.y - cos(player.rotation * DEG2RAD) * (shipHeight / 2.5f), 12 };
	player.color = LIGHTGRAY;
	InitSmall();
}

void InitMedium()
{
	int posx, posy;
	int velx, vely;
	bool correctRange = false;
	for (int i = 0; i < MAX_MEDIUM_METEORS; i++)
	{
		posx = GetRandomValue(0, screenWidth);

		while (!correctRange)
		{
			if (posx > screenWidth / 2 - 150 && posx < screenWidth / 2 + 150) posx = GetRandomValue(0, screenWidth);
			else correctRange = true;
		}

		correctRange = false;

		posy = GetRandomValue(0, screenHeight);

		while (!correctRange)
		{
			if (posy > screenHeight / 2 - 150 && posy < screenHeight / 2 + 150) { posy = GetRandomValue(0, screenHeight); }
			else correctRange = true;
		}

		correctRange = false;
		velx = GetRandomValue(-METEORS_SPEED, METEORS_SPEED);
		vely = GetRandomValue(-METEORS_SPEED, METEORS_SPEED);

		while (!correctRange)
		{
			if (velx == 0 && vely == 0)
			{
				velx = GetRandomValue(-METEORS_SPEED, METEORS_SPEED);
				vely = GetRandomValue(-METEORS_SPEED, METEORS_SPEED);
			}
			else correctRange = true;
		}
		mediumMeteor[i].position = Vector2{ (float)posx,(float)posy };
		mediumMeteor[i].speed = Vector2{ (float)velx,(float)vely };
		mediumMeteor[i].radius = 20;
		mediumMeteor[i].active = true;
		mediumMeteor[i].color = RED;
	}
}

void InitSmall()
{
	int posx, posy;
	int velx, vely;
	bool correctRange = false;
	for (int i = 0; i < MAX_SMALL_METEORS; i++)
	{
		posx = GetRandomValue(0, screenWidth);

		while (!correctRange)
		{
			if (posx > screenWidth / 2 - 150 && posx < screenWidth / 2 + 150) posx = GetRandomValue(0, screenWidth);
			else correctRange = true;
		}

		correctRange = false;

		posy = GetRandomValue(0, screenHeight);

		while (!correctRange)
		{
			if (posy > screenHeight / 2 - 150 && posy < screenHeight / 2 + 150) { posy = GetRandomValue(0, screenHeight); }
			else correctRange = true;
		}

		correctRange = false;
		velx = GetRandomValue(-METEORS_SPEED, METEORS_SPEED);
		vely = GetRandomValue(-METEORS_SPEED, METEORS_SPEED);

		while (!correctRange)
		{
			if (velx == 0 && vely == 0)
			{
				velx = GetRandomValue(-METEORS_SPEED, METEORS_SPEED);
				vely = GetRandomValue(-METEORS_SPEED, METEORS_SPEED);
			}
			else correctRange = true;
		}
		smallMeteor[i].position = Vector2{ (float)posx,(float)posy };
		smallMeteor[i].speed = Vector2{ (float)velx,(float)vely };
		smallMeteor[i].radius = 10;
		smallMeteor[i].active = true;
		smallMeteor[i].color = YELLOW;
	}
}

// Update game (one frame)
void UpdateGame(void)
{
	if (!gameOver)
	{
		if (IsKeyPressed('Q')) pause = !pause;

		if (!pause)
		{
			framesCounter++;

			// Player logic

			// Rotation
			if (IsKeyDown(KEY_LEFT)) player.rotation -= 5;
			if (IsKeyDown(KEY_RIGHT)) player.rotation += 5;

			// Speed
			player.speed.x = sin(player.rotation * DEG2RAD) * PLAYER_SPEED;
			player.speed.y = cos(player.rotation * DEG2RAD) * PLAYER_SPEED;

			// Controller    
			if (IsKeyDown(KEY_UP))
			{
				if (player.acceleration < 1) player.acceleration += 0.04f;
			}
			else
			{
				if (player.acceleration > 0) player.acceleration -= 0.02f;
				else if (player.acceleration < 0) player.acceleration = 0;
			}
			if (IsKeyDown(KEY_DOWN))
			{
				if (player.acceleration > 0) player.acceleration -= 0.04f;
				else if (player.acceleration < 0) player.acceleration = 0;
			}

			// Movement
			player.position.x += (player.speed.x * player.acceleration);
			player.position.y -= (player.speed.y * player.acceleration);

			// Wall behaviour for player
			if (player.position.x > screenWidth + shipHeight) player.position.x = -(shipHeight);
			else if (player.position.x < -(shipHeight)) player.position.x = screenWidth + shipHeight;
			if (player.position.y > (screenHeight + shipHeight)) player.position.y = -(shipHeight);
			else if (player.position.y < -(shipHeight)) player.position.y = screenHeight + shipHeight;

			// Collision Player to meteors
			player.collider = Vector3{ (float)player.position.x + sin(player.rotation * DEG2RAD) * (shipHeight / 2.5f), (float)player.position.y - cos(player.rotation * DEG2RAD) * (shipHeight / 2.5f),(float)12 };

			for (int a = 0; a < MAX_MEDIUM_METEORS; a++)
			{
				if (CheckCollisionCircles(Vector2{ (float)player.collider.x, player.collider.y }, player.collider.z, mediumMeteor[a].position, mediumMeteor[a].radius) && mediumMeteor[a].active) gameOver = true;
			}

			for (int a = 0; a < MAX_SMALL_METEORS; a++)
			{
				if (CheckCollisionCircles(Vector2{ (float)player.collider.x, player.collider.y }, player.collider.z, smallMeteor[a].position, smallMeteor[a].radius) && smallMeteor[a].active) gameOver = true;
			}

			// Meteor logic
			if (wave_1) {

			for (int i = 0; i < MAX_SMALL_METEORS; i++)

			{
				if (smallMeteor[i].active)
				{
					// movement   
					smallMeteor[i].position.x += smallMeteor[i].speed.x;
					smallMeteor[i].position.y += smallMeteor[i].speed.y;

					// wall behaviour
					if (smallMeteor[i].position.x > screenWidth + smallMeteor[i].radius)smallMeteor[i].position.x = -(smallMeteor[i].radius);
					else if (smallMeteor[i].position.x < 0 - smallMeteor[i].radius) smallMeteor[i].position.x = screenWidth + smallMeteor[i].radius;
					if (smallMeteor[i].position.y > screenHeight + smallMeteor[i].radius) smallMeteor[i].position.y = -(smallMeteor[i].radius);
					else if (smallMeteor[i].position.y < 0 - smallMeteor[i].radius) smallMeteor[i].position.y = screenHeight + smallMeteor[i].radius;


				}

			}
			}

			if ((float)framesCounter / 60 > 3)
			{
				wave_1 = false;
				wave_2 = true;

				InitMedium();
			}
			if (wave_2)
			{
				for (int i = 0; i < MAX_MEDIUM_METEORS; i++)
				{
					if (mediumMeteor[i].active)
					{
						// movement
						mediumMeteor[i].position.x += mediumMeteor[i].speed.x;
						mediumMeteor[i].position.y += mediumMeteor[i].speed.y;


						// wall behaviour
						if (smallMeteor[i].position.x > screenWidth + smallMeteor[i].radius)smallMeteor[i].position.x = -(smallMeteor[i].radius);
						else if (smallMeteor[i].position.x < 0 - smallMeteor[i].radius) smallMeteor[i].position.x = screenWidth + smallMeteor[i].radius;
						if (smallMeteor[i].position.y > screenHeight + smallMeteor[i].radius) smallMeteor[i].position.y = -(smallMeteor[i].radius);
						else if (smallMeteor[i].position.y < 0 - smallMeteor[i].radius) smallMeteor[i].position.y = screenHeight + smallMeteor[i].radius;

					}
				}
			}
			if ((float)framesCounter / 60 > 5)
			{
				wave_2 = false;
				wave_3 = true;
			}
			if (wave_3)
			{
				for (int i = 0; i < MAX_SMALL_METEORS; i++)

				{

					if (smallMeteor[i].active)
					{
						// movement   
						smallMeteor[i].position.x += smallMeteor[i].speed.x;
						smallMeteor[i].position.y += smallMeteor[i].speed.y;

						// wall behaviour
						if (smallMeteor[i].position.x > screenWidth + smallMeteor[i].radius)
						{
							smallMeteor[i].active = true;
							smallMeteor[i].position.x = -(smallMeteor[i].radius);
						}
						else if (mediumMeteor[i].position.x < 0 - mediumMeteor[i].radius) mediumMeteor[i].position.x = screenWidth + mediumMeteor[i].radius;
						if (mediumMeteor[i].position.y > screenHeight + mediumMeteor[i].radius) mediumMeteor[i].position.y = -(mediumMeteor[i].radius);
						else if (mediumMeteor[i].position.y < 0 - mediumMeteor[i].radius) mediumMeteor[i].position.y = screenHeight + mediumMeteor[i].radius;


					}

				}
				for (int i = 0; i < MAX_MEDIUM_METEORS; i++)
				{
					if (mediumMeteor[i].active)
					{
						// movement
						mediumMeteor[i].position.x += mediumMeteor[i].speed.x;
						mediumMeteor[i].position.y += mediumMeteor[i].speed.y;


						// wall behaviour
						if (mediumMeteor[i].position.x > screenWidth + mediumMeteor[i].radius)mediumMeteor[i].position.x = -(mediumMeteor[i].radius);
						else if (mediumMeteor[i].position.x < 0 - mediumMeteor[i].radius) mediumMeteor[i].position.x = screenWidth + mediumMeteor[i].radius;
						if (mediumMeteor[i].position.y > screenHeight + mediumMeteor[i].radius) mediumMeteor[i].position.y = -(mediumMeteor[i].radius);
						else if (mediumMeteor[i].position.y < 0 - mediumMeteor[i].radius) mediumMeteor[i].position.y = screenHeight + mediumMeteor[i].radius;

					}
				}
			}
		}
	}
	else
	{
		if (IsKeyPressed(KEY_ENTER))
		{
			InitGame();
			gameOver = false;
		}
	}
}
/*
for(int counter = 0; counter < MAX_SMALL_METEORS -3 ; counter++) {
    mediumMeteor[i].position.x += mediumMeteor[i].speed.x;*/


	// Draw game (one frame)
void DrawGame(void)
{
	BeginDrawing();

	ClearBackground(BLACK);

	if (!gameOver)
	{
		// Draw spaceship
		Vector2 v1 = { player.position.x + sinf(player.rotation * DEG2RAD) * (shipHeight), player.position.y - cosf(player.rotation * DEG2RAD) * (shipHeight) };
		Vector2 v2 = { player.position.x - cosf(player.rotation * DEG2RAD) * (PLAYER_BASE_SIZE / 2), player.position.y - sinf(player.rotation * DEG2RAD) * (PLAYER_BASE_SIZE / 2) };
		Vector2 v3 = { player.position.x + cosf(player.rotation * DEG2RAD) * (PLAYER_BASE_SIZE / 2), player.position.y + sinf(player.rotation * DEG2RAD) * (PLAYER_BASE_SIZE / 2) };
		DrawTriangle(v1, v2, v3, MAROON);

		if(wave_2 || wave_3)
		for (int i = 0; i < MAX_MEDIUM_METEORS; i++)
		{
			if (mediumMeteor[i].active) DrawCircleV(mediumMeteor[i].position, mediumMeteor[i].radius, mediumMeteor[i].color);
			else DrawCircleV(mediumMeteor[i].position, mediumMeteor[i].radius, Fade(YELLOW, 0.3f));
		}

		if(wave_1 || wave_3)
		for (int i = 0; i < MAX_SMALL_METEORS; i++)
		{
			if (smallMeteor[i].active) DrawCircleV(smallMeteor[i].position, smallMeteor[i].radius, smallMeteor[i].color);
			else DrawCircleV(smallMeteor[i].position, smallMeteor[i].radius, Fade(YELLOW, 0.3f));
		}

		DrawText(TextFormat("TIME: %.02f", (float)framesCounter / 60), 10, 10, 20, GREEN);

		if (pause) DrawText("Pause(", screenWidth / 2 - MeasureText("pause(", 40) / 2, screenHeight / 2 - 40, 40, DARKGREEN);
	}
	else  DrawText("PRESS [ENTER] TO START", GetScreenWidth() / 2 - MeasureText("PRESS [ENTER] TO START", 20) / 2, GetScreenHeight() / 2 - 50, 20, GREEN);
	
	if(((float)framesCounter / 60 > 15))DrawText("YOU WIN", screenWidth / 2 - MeasureText("YOU WIN", 35) / 2, screenHeight / 2 - 35, 35, DARKGREEN);
	if ((float)framesCounter / 60 > 16)gameOver = true;
	EndDrawing();

}

void UnloadGame(void)
{

}

void UpdateDrawFrame(void)
{
	UpdateGame();
	DrawGame();
}
